university,course_dept,course_number,course_title,description,professors,recent_semesters,credits,url
stanford,CS,1U,CS 1U - Practical Unix,"A practical introduction to using the Unix operating system with a focus on Linux command line skills. Class will consist of video tutorials and weekly hands-on lab sections. The time listed on AXESS is for the first week's logistical meeting only. Topics include: grep and regular expressions, ZSH, Vim and Emacs, basic and advanced GDB features, permissions, working with the file system, revision control, Unix utilities, environment customization, and using Python for shell scripts. Topics may be added, given sufficient interest. Course website: http://cs1u.stanford.edu. Class Notes: Please see course website http://cs1u.stanford.edu for class times and locations.",Julie Zelenski; J. Zelenski,"Winter 2020, Fall 2019, Spring 2019, Fall 2018, Fall 2017",1,https://www.coursicle.com/stanford/courses/CS/1U/
stanford,CS,7,CS 7 - Personal Finance for Engineers,"Introduction to the fundamentals and analysis specifically needed by engineers to make informed and intelligent financial decisions. Course will focus on actual industry-based financial information from technology companies and realistic financial issues. Topics include: behavioral finance, budgeting, debt, compensation, stock options, investing and real estate. No prior finance or economics experience required.",A. Nash,"Fall 2019, Fall 2018, Fall 2017",1,https://www.coursicle.com/stanford/courses/CS/7/
stanford,CS,9,CS 9 - Problem-Solving for the CS Technical Interview,"This course will prepare students to interview for software engineering and related internships and full-time positions in industry. Drawing on multiple sources of actual interview questions, students will learn key problem-solving strategies specific to the technical/coding interview. Students will be encouraged to synthesize information they have learned across different courses in the major. Emphasis will be on the oral and combination written-oral modes of communication common in coding interviews, but which are unfamiliar settings for problem solving for many students. Prerequisites: CS 106B or X.",C. Lee,Fall 2017,1,https://www.coursicle.com/stanford/courses/CS/9/
stanford,CS,11SI,CS 11SI - How to Make VR: Introduction to Virtual Reality Design and Development,,J. Borenstein,Fall 2018,,https://www.coursicle.com/stanford/courses/CS/11SI/
stanford,CS,20,CS 20 - Tensorflow for Deep Learning Research,,C. Manning,Winter 2017,,https://www.coursicle.com/stanford/courses/CS/20/
stanford,CS,22A,CS 22A - The Social & Economic Impact of Artificial Intelligence,,Jerry Kaplan; J. Kaplan,"Winter 2020, Winter 2017",,https://www.coursicle.com/stanford/courses/CS/22A/
stanford,CS,51,CS 51 - Cs + Social Good Studio: Designing Social Impact Projects,,J. Cain,Winter 2017,,https://www.coursicle.com/stanford/courses/CS/51/
stanford,CS,52,CS 52 - CS + Social Good Studio: Implementing Social Good Projects,"Continuation of CS51 (CS + Social Good Studio: Designing Social Impact Projects)Teams enter the quarter having completed and tested a minimal viable product (MVP) with a well-defined target user, and a community partner. Students will learn to apply scalable technical frameworks, methods to measure social impact, tools for deployment, user acquisition techniques and growth/exit strategies. The purpose of the class is to facilitate students to build a sustainable infrastructure around their product idea. CS52 will host mentors, guest speakers and industry experts for various workshops and coaching-sessions. The class culminates in a showcase where students share their projects with stakeholders and the public. Prerequisite: CS 51, or consent of instructor. Class Notes: Continuation of CS 51. Enrollment limited. Consent of instructors required. Contact the teaching team and find more info at CS51.stanford.edu.",Jerry Cain; J. Cain,"Fall 2020, Spring 2020, Spring 2019, Spring 2018",2,https://www.coursicle.com/stanford/courses/CS/52/
stanford,CS,53SI,CS 53SI - Discussion in Tech for Good,"This course introduces students to various intersections of social good and technology through a weekly discussion and speaker series. Students will be given a space to exchange ideas and experiences regarding a certain social issue. Invited speakers come from industry, academia, and non-profit organizations. They will share their career paths, what drove them to these fields, and advice for students. The topics examined will span a broad variety of social issues -- from race and class to education and sustainability -- and help students better understand how to kick off their journey in using computer science for social good. Class Notes: Permission of instructor required to enroll. Enrollment codes will be given in class.",M. Sahami,Fall 2017,1,https://www.coursicle.com/stanford/courses/CS/53SI/
stanford,CS,56N,CS 56N - Great Discoveries and Inventions in Computing,"This seminar will explore some of both the great discoveries that underlie computer science and the inventions that have produced the remarkable advances in computing technology. Key questions we will explore include: What is computable? How can information be securely communicated? How do computers fundamentally work? What makes computers fast? Our exploration will look both at the principles behind the discoveries and inventions, as well as the history and the people involved in those events. Some exposure to programming will be helpful, but it not strictly necessary. Class Notes: Introductory Seminar. Preference to first-year students; sophomores admitted if space available. Advance sign-up process and deadlines at http://introsems.stanford.edu.",J. Hennessy,"Fall 2019, Fall 2017",3,https://www.coursicle.com/stanford/courses/CS/56N/
stanford,CS,57N,CS 57N - Randomness: Computational and Philosophical Approaches,,M. Wootters,Fall 2019,,https://www.coursicle.com/stanford/courses/CS/57N/
stanford,CS,58N,CS 58N - The Blockchain Revolution Will Not Be Televised,,John Mitchell,Winter 2020,,https://www.coursicle.com/stanford/courses/CS/58N/
stanford,CS,62N,CS 62N - Let There Be Computations,"The class will discuss the Theory of Computing as an ambitious intellectual endeavor with impact beyond Computer Science. What are computations? How can their study capture important aspects of the evolution of species, the structure of social networks, and the working of your smart phone? What are the laws of efficiency and complexity that govern computations? We will see surprising algorithms for very familiar problems as well as simple problems no one knows how to solve efficiently. We will encounter logic paradoxes that expose the limitations of computations and explore the different worlds we may be living in, depending on the answers to some of the central problems on computations. The class is intended for students with a wide range of interests. The course will not involve programming. While our class will not rely on any deep mathematics (beyond basic high-school math) we will deal with mathematical formalization of concepts and with mathematical problem-solving. Therefore, some mathematical maturity and interest would be useful. Class Notes: Introductory Seminar. Preference to first-year students; sophomores admitted if space available. Advance sign-up process and deadlines at http://introsems.stanford.edu.",O. Reingold,Spring 2018,3,https://www.coursicle.com/stanford/courses/CS/62N/
stanford,CS,80Q,CS 80Q - Race and Gender in Silicon Valley,,Cynthia Lee; C. Lee,"Winter 2020, Fall 2018",,https://www.coursicle.com/stanford/courses/CS/80Q/
stanford,CS,81SI,CS 81SI - AI Interpretability and Fairness,,Omer Reingold,"Fall 2020, Spring 2020",,https://www.coursicle.com/stanford/courses/CS/81SI/
stanford,CS,82SI,CS 82SI - Wellness in Tech: Designing an Intentional Lifestyle in a Tech-Driven World,,Chris Piech,"Fall 2020, Spring 2020",,https://www.coursicle.com/stanford/courses/CS/82SI/
stanford,CS,83,CS 83 - Playback Theater,,Omer Reingold; O. Reingold,"Winter 2020, Winter 2017",,https://www.coursicle.com/stanford/courses/CS/83/
stanford,CS,84,CS 84 - Emotional Intelligence,,Sebastian Thrun,Spring 2020,,https://www.coursicle.com/stanford/courses/CS/84/
stanford,CS,91SI,CS 91SI - Digital Canvas: an Introduction to UI/UX Design,,Jerry Cain,Winter 2020,,https://www.coursicle.com/stanford/courses/CS/91SI/
stanford,CS,93,CS 93 - Teaching AI,,A. Ng,Fall 2019,,https://www.coursicle.com/stanford/courses/CS/93/
stanford,CS,100A,CS 100A - Problem-solving Lab for CS106A,,Nick Parlante; N. Parlante,"Winter 2020, Fall 2019",,https://www.coursicle.com/stanford/courses/CS/100A/
stanford,CS,101,CS 101 - Introduction to Computing Principles,"Introduces the essential ideas of computing: data representation, algorithms, programming ""code"", computer hardware, networking, security, and social issues. Students learn how computers work and what they can do through hands-on exercises. In particular, students will see the capabilities and weaknesses of computer systems so they are not mysterious or intimidating. Course features many small programming exercises, although no prior programming experience is assumed or required. CS101 is not a complete programming course such as CS106A. CS101 is effectively an alternative to CS105. A laptop computer is recommended for the in-class exercises. Class Notes: May be taken for 3 units by graduate students.",A. Taylor,"Fall 2018, Spring 2018",,https://www.coursicle.com/stanford/courses/CS/101/
stanford,CS,102,CS 102 - Working with Data - Tools and Techniques,"Aimed at non-CS undergraduate and graduate students who want to learn the basics of big data tools and techniques and apply that knowledge in their areas of study. Many of the world's biggest discoveries and decisions in science, technology, business, medicine, politics, and society as a whole, are now being made on the basis of analyzing massive data sets. At the same time, it is surprisingly easy to make errors or come to false conclusions from data analysis alone. This course provides a broad and practical introduction to big data: data analysis techniques including databases, data mining, and machine learning; data analysis tools including spreadsheets, relational databases and SQL, Python, and R; data visualization techniques and tools; pitfalls in data collection and analysis; historical context, privacy, and other ethical issues. Tools and techniques are hands-on but at a cursory level, providing a basis for future exploration and application. Prerequisites: comfort with basic logic and mathematical concepts, along with high school AP computer science, CS106A, or other equivalent programming experience.",Jennifer Widom; J. Widom,"Fall 2020, Spring 2020, Spring 2018, Fall 2017",,https://www.coursicle.com/stanford/courses/CS/102/
stanford,CS,103,CS 103 - Mathematical Foundations of Computing,"Mathematical foundations required for computer science, including propositional predicate logic, induction, sets, functions, and relations. Formal language theory, including regular expressions, grammars, finite automata, Turing machines, and NP-completeness. Mathematical rigor, proof techniques, and applications. Prerequisite: CS106B or equivalent. CS106B may be taken concurrently with CS103. Class Notes: May be taken for 3 units by graduate students.",Cynthia Lee; K. Schwarz; C. Lee,"Winter 2020, Fall 2020, Spring 2020, Fall 2019, Spring 2019",,https://www.coursicle.com/stanford/courses/CS/103/
stanford,CS,103A,CS 103A - Mathematical Problem-solving Strategies,Problem solving strategies and techniques in discrete mathematics and computer science. Additional problem solving practice for CS103. In-class participation required. Prerequisite: consent of instructor. Co-requisite: CS103.,Cynthia Lee; A. Liu; K. Schwarz; C. Lee,"Winter 2020, Fall 2019, Fall 2018, Spring 2018, Winter 2017",1,https://www.coursicle.com/stanford/courses/CS/103A/
stanford,CS,105,CS 105 - Introduction to Computers,For non-technical majors. What computers are and how they work. Practical experience in programming. Construction of computer programs and basic design techniques. A survey of Internet technology and the basics of computer hardware. Students in technical fields and students looking to acquire programming skills should take 106A or 106X. Students with prior computer science experience at the level of 106 or above require consent of instructor. Prerequisite: minimal math skills. Class Notes: May be taken for 3 units by grad students.,Patrick Young; P. Young,"Fall 2020, Spring 2020, Fall 2019, Spring 2019, Fall 2017",,https://www.coursicle.com/stanford/courses/CS/105/
stanford,CS,106A,CS 106A - Programming Methodology,"Introduction to the engineering of computer applications emphasizing modern software engineering principles: object-oriented design, decomposition, encapsulation, abstraction, and testing. Emphasis is on good programming style and the built-in facilities of respective languages. No prior programming experience required. Summer quarter enrollment is limited. Alternative versions of CS106A are available which cover most of the same material but in different programming languages: Java [Fall, Win, Spr, or Sum qtr enroll in CS106A Section 1] Javascript [Fall qtr enroll in CS 106A Section 2] Python [Winter or Spring qtr enroll in CS 106A Section 3]. Class Notes: May be taken for 3 units by graduate students.",Nick Parlante; Chris Piech; N. Parlante; J. Cain; M. Sahami; C. Piech,"Winter 2020, Fall 2020, Spring 2020, Fall 2019, Spring 2019",,https://www.coursicle.com/stanford/courses/CS/106A/
stanford,CS,106B,CS 106B - Programming Abstractions,"Abstraction and its relation to programming. Software engineering principles of data abstraction and modularity. Object-oriented programming, fundamental data structures (such as stacks, queues, sets) and data-directed design. Recursion and recursive data structures (linked lists, trees, graphs). Introduction to time and space complexity analysis. Uses the programming language C++ covering its basic facilities. Prerequisite: 106A or equivalent. Summer quarter enrollment is limited. Class Notes: Same as Eng 70B. May be taken for 3 units by graduate students. Discussion sections assigned after first week of class via CS198 website; do not enroll in sections through Axess.",Keith Schwarz; Christopher Gregg; Julie Zelenski; C. Lee; M. Stepp; C. Gregg,"Winter 2020, Fall 2020, Spring 2020, Fall 2019, Spring 2019",,https://www.coursicle.com/stanford/courses/CS/106B/
stanford,CS,106E,CS 106E - Exploration of Computing,"A follow up class to CS106A for non-majors which will both provide practical web programming skills and cover essential computing topics including computer security and privacy. Additional topics will include digital representation of images and music, an exploration of how the Internet works, and a look at the internals of the computer. Students taking the course for 4 units will be required to carry out supplementary programming assignments in addition to the course's regular assignments. Prerequisite: 106A or equivalent. Class Notes: Graduate students may take this course for 3 units.",Patrick Young; P. Young,"Fall 2020, Spring 2020, Spring 2019, Spring 2018",,https://www.coursicle.com/stanford/courses/CS/106E/
stanford,CS,106L,CS 106L - Standard C++ Programming Laboratory,,Keith Schwarz; Julie Zelenski; C. Lee; A. Malik,"Winter 2020, Fall 2020, Spring 2020, Fall 2019, Fall 2018",,https://www.coursicle.com/stanford/courses/CS/106L/
stanford,CS,106S,CS 106S - Coding for Social Good,,Jerry Cain; J. Cain,"Winter 2020, Fall 2020, Spring 2020, Spring 2019, Fall 2018",,https://www.coursicle.com/stanford/courses/CS/106S/
stanford,CS,106X,CS 106X - Programming Abstractions (Accelerated),"Intensive version of 106B for students with a strong programming background interested in a rigorous treatment of the topics at an accelerated pace. Additional advanced material and more challenging projects. Winter quarter assignments will be based in CS department research. Prerequisite: excellence in 106A or equivalent, or consent of instructor. Winter quarter enrollment limited to 30. Class Notes: Discussion section enrollment is done in-class the first week, not on Axess.",J. Cain; N. Troccoli; M. Stepp,"Fall 2019, Fall 2018, Winter 2017, Fall 2017",,https://www.coursicle.com/stanford/courses/CS/106X/
stanford,CS,106AJ,CS 106AJ - Programming Methodology in JavaScript,"Introduction to the engineering of computer applications emphasizing modern software engineering principles: object-oriented design, decomposition, encapsulation, abstraction, and testing. Uses the JavaScript programming language. Emphasis is on good programming style and the built-in facilities of the JavaScript language. No prior programming experience required. This course covers most of the same material as CS106A Section 1 in Java and CS 106A Section 3 in Python, but this course uses the JavaScript programming language. To enroll in this class, enroll in CS 106A Section 2 for Fall Qtr.May be taken for 3 units by grad students. Class Notes: Students should enroll in this course through section 2 of CS106A. Discussion section enrollment is done in-class the first week, not on Axess. May be taken for 3 units by graduate students.",J. Cain,"Fall 2018, Fall 2017",,https://www.coursicle.com/stanford/courses/CS/106AJ/
stanford,CS,106AP,CS 106AP - Programming Methodology in Python,"Introduction to the engineering of computer applications in Python, emphasizing modern software engineering principles: decomposition, abstraction, and testing. Emphasis is on good programming style. This course covers most of the same material as CS106A Section 1 in Java and CS 106A Section 2 in JavaScript, but this course uses the Python programming language which is popular for general engineering and web development. Required readings will all be available for free on the web. Students are encouraged to bring a laptop to lecture to do the live exercises which are integrated with lecture. No prior programming experience required. To enroll in this class, enroll in CS 106A Section 3. May be taken for 3 units by grad students. Enrollment is limited for winter quarter 2017-18 but from spring quarter 2017-18 enrollment will be unlimited. Class Notes: To enroll in this class, enroll in CS106A Section 3. Graduate students may take this course for 3 units.",N. Parlante,"Spring 2019, Spring 2018, Winter 2017",,https://www.coursicle.com/stanford/courses/CS/106AP/
stanford,CS,106AX,CS 106AX - Programming Methodologies in JavaScript and Python (Accelerated),,David Varodayan; J. Cain,"Spring 2020, Fall 2019",,https://www.coursicle.com/stanford/courses/CS/106AX/
stanford,CS,107A,CS 107A - Problem-solving Lab for CS107,,Jerry Cain; Nicholas Troccoli,"Winter 2020, Fall 2020",,https://www.coursicle.com/stanford/courses/CS/107A/
stanford,CS,107E,CS 107E - Computer Systems from the Ground Up,"Introduction to the fundamental concepts of computer systems through bare metal programming on the Raspberry Pi. Explores how five concepts come together in computer systems: hardware, architecture, assembly code, the C language, and software development tools. Students do all programming with a Raspberry Pi kit and several add-ons (LEDs, buttons). Topics covered include: the C programming language, data representation, machine-level code, computer arithmetic, compilation, memory organization and management, debugging, hardware, and I/O. Prerequisite: 106B or X, and consent of instructor. There is a $50 required lab fee. Class Notes: May be taken for 3 units by graduate students. Enrollment limited to 40. Consent of instructor required. $50 lab fee required. Attend first class for further instructions. See site for details: cs107e.stanford.edu.",Pat Hanrahan; Philip Levis; C. Gregg; J. Zelenski,"Winter 2020, Fall 2020, Spring 2020, Fall 2018, Spring 2018",,https://www.coursicle.com/stanford/courses/CS/107E/
stanford,CS,108,CS 108 - Object-Oriented Systems Design,"Software design and construction in the context of large OOP libraries. Taught in Java. Topics: OOP design, design patterns, testing, graphical user interface (GUI) OOP libraries, software engineering strategies, approaches to programming in teams. Prerequisite: 107. Class Notes: May be taken for 3 units by graduate students.",Patrick Young; P. Young,"Winter 2020, Fall 2018, Winter 2017, Fall 2017",,https://www.coursicle.com/stanford/courses/CS/108/
stanford,CS,109,CS 109 - Introduction to Probability for Computer Scientists,"Topics include: counting and combinatorics, random variables, conditional probability, independence, distributions, expectation, point estimation, and limit theorems. Applications of probability in computer science including machine learning and the use of probability in the analysis of algorithms. Prerequisites: 103, 106B or X, multivariate calculus at the level of MATH 51 or CME 100 or equivalent. Class Notes: May be taken for 3 units by graduate students.",David Varodayan; Lisa Yan; L. Yan; C. Piech; M. Sahami,"Winter 2020, Fall 2020, Spring 2020, Fall 2019, Spring 2019",,https://www.coursicle.com/stanford/courses/CS/109/
stanford,CS,110,CS 110 - Principles of Computer Systems,"Principles and practice of engineering of computer software and hardware systems. Topics include: techniques for controlling complexity; strong modularity using client-server design, virtual memory, and threads; networks; atomicity and coordination of parallel activities; security, and encryption; and performance optimizations. Prerequisite: 107. Class Notes: May be taken for 3 units by graduate students.",Christopher Gregg; Jerry Cain; C. Gregg; J. Cain,"Winter 2020, Fall 2020, Spring 2020, Fall 2019, Spring 2019",,https://www.coursicle.com/stanford/courses/CS/110/
stanford,CS,110L,CS 110L - Principles of Computer Systems Laboratory,,Jerry Cain,"Fall 2020, Spring 2020",,https://www.coursicle.com/stanford/courses/CS/110L/
stanford,CS,124,CS 124 - From Languages to Information,,Dan Jurafsky; D. Jurafsky,"Winter 2020, Winter 2017",,https://www.coursicle.com/stanford/courses/CS/124/
stanford,CS,129,CS 129 - Applied Machine Learning,,Younes Mourri; Andrew Ng; A. Ng,"Winter 2020, Fall 2020, Spring 2020, Fall 2019",,https://www.coursicle.com/stanford/courses/CS/129/
stanford,CS,131,CS 131 - Computer Vision: Foundations and Applications,"Robots that can navigate space and perform duties, search engines that can index billions of images and videos, algorithms that can diagnose medical images for diseases, or smart cars that can see and drive safely: Lying in the heart of these modern AI applications are computer vision technologies that can perceive, understand and reconstruct the complex visual world. This course is designed for students who are interested in learning about the fundamental principles and important applications of computer vision. Course will introduce a number of fundamental concepts in computer vision and expose students to a number of real-world applications, plus guide students through a series of projects such that they will get to implement cutting-edge computer vision algorithms. Prerequisites: Students should be familiar with Python (i.e. have programmed in Python before) and Linux; plus Calculus & Linear Algebra. Class Notes: May be taken for 3 units by graduate students.",Niebles Duque; J. Duque,"Fall 2019, Fall 2018, Fall 2017",,https://www.coursicle.com/stanford/courses/CS/131/
stanford,CS,140,CS 140 - Operating Systems and Systems Programming,"Operating systems design and implementation. Basic structure; synchronization and communication mechanisms; implementation of processes, process management, scheduling, and protection; memory organization and management, including virtual memory; I/O device management, secondary storage, and file systems. Prerequisite: CS 110. Class Notes: May be taken for 3 units by graduate students.",David Mazieres; John Ousterhout; J. Ousterhout; D. Mazieres,"Winter 2020, Fall 2020, Spring 2020, Spring 2019, Spring 2018",,https://www.coursicle.com/stanford/courses/CS/140/
stanford,CS,140E,CS 140E - Operating systems design and implementation,,Dawson Engler; D. Engler,"Winter 2020, Winter 2017",,https://www.coursicle.com/stanford/courses/CS/140E/
stanford,CS,141,CS 141 - Introduction to Computer Sound,,D. James,Spring 2019,,https://www.coursicle.com/stanford/courses/CS/141/
stanford,CS,143,CS 143 - Compilers,"Principles and practices for design and implementation of compilers and interpreters. Topics: lexical analysis; parsing theory; symbol tables; type systems; scope; semantic analysis; intermediate representations; runtime environments; code generation; and basic program analysis and optimization. Students construct a compiler for a simple object-oriented language during course programming projects. Prerequisites: 103 or 103B, and 107. Class Notes: May be taken for 3 units by graduate students.",Fredrik Kjoelstad; S. Chandra; A. Aiken,"Fall 2020, Spring 2020, Spring 2019, Spring 2018",,https://www.coursicle.com/stanford/courses/CS/143/
stanford,CS,145,CS 145 - Data Management and Data Systems,"The course covers database design and the use of database management systems for applications. It includes extensive coverage of the relational model, relational algebra, and SQL.The course includes database design and relational design principles based on dependencies and normal forms. Many additional key database topics from the design and application-building perspective are also covered: indexes, views, transactions, authorization, integrity constraints, triggers, on-line analytical processing (OLAP), JSON, and emerging NoSQL systems. Class time will include guest speakers from industry and additional advanced topics as time and class interest permits. Prerequisites: 103 and 107 (or equivalent). Class Notes: May be taken for 3 units by graduate students.",N. Shivakumar; P. Bailis,"Fall 2019, Fall 2018, Fall 2017",,https://www.coursicle.com/stanford/courses/CS/145/
stanford,CS,146,CS 146 - Introduction to Game Design and Development,,D. James,"Fall 2018, Fall 2017",,https://www.coursicle.com/stanford/courses/CS/146/
stanford,CS,147,CS 147 - Introduction to Human-Computer Interaction Design,"Introduces fundamental methods and principles for designing, implementing, and evaluating user interfaces. Topics: user-centered design, rapid prototyping, experimentation, direct manipulation, cognitive principles, visual design, social software, software tools. Learn by doing: work with a team on a quarter-long design project, supported by lectures, readings, and studios. Prerequisite: 106B or X or equivalent programming experience. Recommended that CS Majors have also taken one of 142, 193P, or 193A.",J. Landay,"Fall 2019, Fall 2018, Fall 2017",,https://www.coursicle.com/stanford/courses/CS/147/
stanford,CS,151,CS 151 - Logic Programming,,Michael Genesereth; M. Genesereth,"Fall 2020, Spring 2020, Spring 2019",,https://www.coursicle.com/stanford/courses/CS/151/
stanford,CS,154,CS 154 - Introduction to Automata and Complexity Theory,"This course provides a mathematical introduction to the following questions: What is computation? Given a computational model, what problems can we hope to solve in principle with this model? Besides those solvable in principle, what problems can we hope to efficiently solve? In many cases we can give completely rigorous answers; in other cases, these questions have become major open problems in computer science and mathematics. By the end of this course, students will be able to classify computational problems in terms of their computational complexity (Is the problem regular? Not regular? Decidable? Recognizable? Neither? Solvable in P? NP-complete? PSPACE-complete?, etc.). Students will gain a deeper appreciation for some of the fundamental issues in computing that are independent of trends of technology, such as the Church-Turing Thesis and the P versus NP problem. Prerequisites: CS 103 or 103B. Class Notes: Graduate students may take for 3 units.",O. Reingold,"Fall 2019, Fall 2018, Fall 2017",,https://www.coursicle.com/stanford/courses/CS/154/
stanford,CS,21SI,CS 21SI - AI for Social Good,"Students will learn about and apply cutting-edge artificial intelligence techniques to real-world social good spaces (such as healthcare, government, education, and environment). Taught jointly by CS+Social Good and the Stanford AI Group, the aim of the class is to empower students to apply these techniques outside of the classroom. The class will focus on techniques from machine learning and deep learning, including regression, support vector machines (SVMs), neural networks, convolutional neural networks (CNNs), and recurrent neural networks (RNNs). The course alternates between lectures on machine learning theory and discussions with invited speakers, who will challenge students to apply techniques in their social good domains. Students complete weekly coding assignments reinforcing machine learning concepts and applications. Prerequisites: programming experience at the level of CS107, mathematical fluency at the level of CS103, comfort with probability at the level of CS109 (or equivalent). Application required for enrollment. Class Notes: Student-initiated course. Enrollment limited to 20. Application required. Apply at: https://aiforsocialgood.typeform.com/to/Qon2xm The application will be due Saturday, March 10 at 11:59pm.",C. Piech,Spring 2018,2,https://www.coursicle.com/stanford/courses/CS/21SI/
stanford,CS,28,"CS 28 - Artificial Intelligence, Entrepreneurship and Society in the 21st Century and Beyond","Technical developments in artificial intelligence (AI) have opened up newopportunities for entrepreneurship, as well as raised profound longer termquestions about how human societal and economic systems may bere足organized to accommodate the rise of intelligent machines. In thiscourse, closely co足taught by a Stanford professor and a leading SiliconValley venture capitalist, we will examine the current state of the artcapabilities of existing artificial intelligence systems, as well aseconomic challenges and opportunities in early stage startups and largecompanies that could leverage AI. We will focus on gaps between businessneeds and current technical capabilities to identify high impactdirections for the development of future AI technology. Simultaneously, wewill explore the longer term societal impact of AI driven by inexorabletrends in technology and entrepreneurship. The course includes guestlectures from leading technologists and entrepreneurs who employ AI in avariety of fields, including healthcare, education, self足driving cars,computer security, natural language interfaces, computer vision systems,and hardware acceleration. Class Notes: Application, consent of instructor, and permission number required. To enroll apply here: https://ganguli-gang.stanford.edu/cs28_fall2017.html Deadline to apply: Sept. 22.",S. Ganguli,Fall 2017,2,https://www.coursicle.com/stanford/courses/CS/28/
stanford,CS,41,CS 41 - Hap.py Code: the Python Programming Language,,Jerry Cain,Winter 2020,,https://www.coursicle.com/stanford/courses/CS/41/
stanford,CS,42,CS 42 - Callback Me Maybe: Contemporary Javascript,,K. Schwarz,"Spring 2018, Winter 2017",,https://www.coursicle.com/stanford/courses/CS/42/
stanford,CS,45N,CS 45N - Computers and Photography: From Capture to Sharing,"Preference to freshmen with experience in photography and use of computers. Elements of photography, such as lighting, focus, depth of field, aperture, and composition. How a photographer makes photos available for computer viewing, reliably stores them, organizes them, tags them, searches them, and distributes them online. No programming experience required. Digital SLRs and editing software will be provided to those students who do not wish to use their own. Class Notes: Advance sign-up process and deadlines at http://introsems.stanford.edu.",H. Garcia-Molina,"Fall 2019, Spring 2019, Fall 2018, Spring 2018, Fall 2017",,https://www.coursicle.com/stanford/courses/CS/45N/
stanford,CS,47,CS 47 - Cross-Platform Mobile Development,,J. Landay,"Fall 2019, Fall 2018",,https://www.coursicle.com/stanford/courses/CS/47/
stanford,CS,47SI,CS 47SI - Cross-Platform Mobile Development,,J. Landay,Winter 2017,,https://www.coursicle.com/stanford/courses/CS/47SI/
stanford,CS,49N,CS 49N - Using Bits to Control Atoms,"This is a crash course in how to use a stripped-down computer system about the size of a credit card (the rasberry pi computer) to control as manydifferent sensors as we can implement in ten weeks, including LEDs, motion sensors, light controllers, and accelerometers. The ability to fearlesslygrab a set of hardware devices, examine the data sheet to see how to use it, and stitch them together using simple code is a secret weapon thatsoftware-only people lack, and allows you to build many interesting gadgets. We will start with a ""bare metal'' system --- no operatingsystem, no support --- and teach you how to read device data sheets describing sensors and write the minimal code needed to control them(including how to debug when things go wrong, as they always do). This course differs from most in that it is deliberately mostly about what andwhy rather than how --- our hope is that the things you are able at the end will inspire you to follow the rest of the CS curriculum to understandbetter how things you've used work. Prerequisites: knowledge of the C programming language. A Linux or Mac laptop that you are comfortablecoding on. Class Notes: Introductory Seminar. Preference to first-year students; sophomores admitted if space available. Advance sign-up process and deadlines at http://introsems.stanford.edu.",Dawson Engler; D. Engler,"Spring 2020, Spring 2019, Spring 2018",3,https://www.coursicle.com/stanford/courses/CS/49N/
stanford,CS,50,CS 50 - Using Tech for Good,"Students in the class will work in small teams to implement high-impact projects for partner organizations. Taught by the CS+Social Good team, the aim of the class is to empower you to leverage technology for social good by inspiring action, facilitating collaboration, and forging pathways towards global change. Recommended: CS 106B, CS 42 or 142. Class is open to students of all years. May be repeated for credit. Cardinal Course certified by the Haas Center. Class Notes: Enrollment limited to 50. Application, consent of instructors, and permission number required. Apply at bit.ly/cs50spring18app by 11:59pm on 3/14.",J. Cain,"Spring 2018, Fall 2017",2,https://www.coursicle.com/stanford/courses/CS/50/
stanford,CS,107,CS 107 - Computer Organization and Systems,"Introduction to the fundamental concepts of computer systems. Explores how computer systems execute programs and manipulate data, working from the C programming language down to the microprocessor. Topics covered include: the C programming language, data representation, machine-level code, computer arithmetic, elements of code compilation, memory organization and management, and performance evaluation and optimization. Prerequisites: 106B or X, or consent of instructor. Class Notes: May be taken for 3 units by graduate students.",Jerry Cain; Nicholas Troccoli; N. Troccoli; C. Lee; J. Zelenski; C. Gregg,"Winter 2020, Fall 2020, Spring 2020, Fall 2019, Spring 2019",,https://www.coursicle.com/stanford/courses/CS/107/
stanford,CS,142,CS 142 - Web Applications,"Concepts and techniques used in constructing interactive web applications. Browser-side web facilities such as HTML, cascading stylesheets, the document object model, and JavaScript frameworks and Server-side technologies such as server-side JavaScript, sessions, and object-oriented databases. Issues in web security and application scalability. New models of web application deployment. Prerequisites: CS 107 and CS 108.",Mendel Rosenblum; M. Rosenblum,"Winter 2020, Fall 2020, Spring 2020, Spring 2019, Spring 2018",3,https://www.coursicle.com/stanford/courses/CS/142/
stanford,CS,144,CS 144 - Introduction to Computer Networking,"Principles and practice. Structure and components of computer networks, packet switching, layered architectures. Applications: web/http, voice-over-IP, p2p file sharing and socket programming. Reliable transport: TCP/IP, reliable transfer, flow control, and congestion control. The network layer: names and addresses, routing. Local area networks: ethernet and switches. Wireless networks and network security. Prerequisite: CS 110. Class Notes: May be taken by graduate students for 3 units.",K. Winstein,"Fall 2019, Fall 2017",,https://www.coursicle.com/stanford/courses/CS/144/
stanford,CS,148,CS 148 - Introduction to Computer Graphics and Imaging,"Introductory prerequisite course in the computer graphics sequence introducing students to the technical concepts behind creating synthetic computer generated images. Focuses on using OpenGL to create visual imagery, as well as an understanding of the underlying mathematical concepts including triangles, normals, interpolation, texture mapping, bump mapping, etc. Course will cover fundamental understanding of light and color, as well as how it impacts computer displays and printers. Class will discuss more thoroughly how light interacts with the environment, constructing engineering models such as the BRDF, plus various simplifications into more basic lighting and shading models. Also covers ray tracing technology for creating virtual images, while drawing parallels between ray tracers and real world cameras to illustrate various concepts. Anti-aliasing and acceleration structures are also discussed. The final class mini-project consists of building out a ray tracer to create visually compelling images. Starter codes and code bits will be provided to aid in development, but this class focuses on what you can do with the code as opposed to what the code itself looks like. Therefore grading is weighted toward in person ""demos"" of the code in action - creativity and the production of impressive visual imagery are highly encouraged. Prerequisites: CS 107, MATH 51. Class Notes: May be taken for 3 units by graduate students.",R. Fedkiw,"Fall 2019, Fall 2018, Fall 2017",,https://www.coursicle.com/stanford/courses/CS/148/
stanford,CS,149,CS 149 - Parallel Computing,,K. Fatahalian; M. Zaharia,"Fall 2019, Winter 2017",,https://www.coursicle.com/stanford/courses/CS/149/
stanford,CS,152,CS 152 - Trust and Safety Engineering,,Alex Stamos; A. Stamos,"Winter 2020, Fall 2019",,https://www.coursicle.com/stanford/courses/CS/152/
stanford,CS,155,CS 155 - Computer and Network Security,"For seniors and first-year graduate students. Principles of computer systems security. Attack techniques and how to defend against them. Topics include: network attacks and defenses, operating system security, application security (web, apps, databases), malware, privacy, and security for mobile devices. Course projects focus on building reliable code. Prerequisite: 110. Recommended: basic Unix.",Dan Boneh; D. Boneh,"Fall 2020, Spring 2020, Spring 2019, Spring 2018",3,https://www.coursicle.com/stanford/courses/CS/155/
stanford,CS,157,CS 157 - Computational Logic,"An elementary exposition from a computational point of view of propositional and predicate logic, axiomatic theories, and theories with equality and induction. Interpretations, models, validity, proof, strategies, and applications. Automated deduction: polarity, skolemization, unification, resolution, equality. Prerequisite: 103 or 103B.",M. Genesereth,"Fall 2019, Fall 2018, Fall 2017",3,https://www.coursicle.com/stanford/courses/CS/157/
stanford,CS,161,CS 161 - Design and Analysis of Algorithms,"Worst and average case analysis. Recurrences and asymptotics. Efficient algorithms for sorting, searching, and selection. Data structures: binary search trees, heaps, hash tables. Algorithm design techniques: divide-and-conquer, dynamic programming, greedy algorithms, amortized analysis, randomization. Algorithms for fundamental graph problems: minimum-cost spanning tree, connected components, topological sort, and shortest paths. Possible additional topics: network flow, string searching. Prerequisite: 103 or 103B; 109 or STATS 116. Class Notes: Graduate students may take for 3 units.",Mary Wootters; A. Rubinstein; L. Guibas; M. Wootters,"Winter 2020, Fall 2019, Fall 2018, Winter 2017, Fall 2017",,https://www.coursicle.com/stanford/courses/CS/161/
stanford,CS,166,CS 166 - Data Structures,"Techniques in the design, analysis, and implementation of data structures. Isometries between data structures (including red/black trees and 2-3-4 trees), amortized analysis (including Fibonacci heaps and splay trees), and randomization (including count-min sketches and dynamic perfect hash tables). Data structures for integers and strings (including van Emde Boas trees and suffix trees). Possible additional topics include functional data structures, concurrent data structures, and spatial data structures. Prerequisites: CS107 and CS161. Class Notes: May be taken for 3 units by graduate students.",Keith Schwarz; K. Schwarz,"Fall 2020, Spring 2020, Spring 2019, Spring 2018",,https://www.coursicle.com/stanford/courses/CS/166/
stanford,CS,168,CS 168 - The Modern Algorithmic Toolbox,"This course will provide a rigorous and hands-on introduction to the central ideas and algorithms that constitute the core of the modern algorithms toolkit. Emphasis will be on understanding the high-level theoretical intuitions and principles underlying the algorithms we discuss, as well as developing a concrete understanding of when and how to implement and apply the algorithms. The course will be structured as a sequence of one-week investigations; each week will introduce one algorithmic idea, and discuss the motivation, theoretical underpinning, and practical applications of that algorithmic idea. Each topic will be accompanied by a mini-project in which students will be guided through a practical application of the ideas of the week. Topics include hashing, dimension reduction and LSH, boosting, linear programming, gradient descent, sampling and estimation, and an introduction to spectral techniques. Prerequisites: CS107 and CS161, or permission from the instructor. Class Notes: May be taken for 3 units by graduate students.",Gregory Valiant; G. Valiant,"Fall 2020, Spring 2020, Spring 2019, Spring 2018",,https://www.coursicle.com/stanford/courses/CS/168/
stanford,CS,170,"CS 170 - Stanford Laptop Orchestra: Composition, Coding, and Performance","Classroom instantiation of the Stanford Laptop Orchestra (SLOrk) which includes public performances. An ensemble of more than 20 humans, laptops, controllers, and special speaker arrays designed to provide each computer-mediated instrument with its sonic identity and presence. Topics and activities include issues of composing for laptop orchestras, instrument design, sound synthesis, programming, and live performance. May be repeated four times for credit. Space is limited; see https://ccrma.stanford.edu/courses/128 for information about the application and enrollment process. May be repeat for credit.",Ge Wang; G. Wang,"Spring 2020, Spring 2019, Spring 2018",,https://www.coursicle.com/stanford/courses/CS/170/
stanford,CS,181,"CS 181 - Computers, Ethics, and Public Policy","Primarily for majors entering computer-related fields. Ethical and social issues related to the development and use of computer technology. Ethical theory, and social, political, and legal considerations. Scenarios in problem areas: privacy, reliability and risks of complex systems, and responsibility of professionals for applications and consequences of their work. Prerequisite: 106B or X. To take this course, students need permission of instructor and may need to complete an assignment due at the first day of class. Class Notes: Enrollment limited to 10. Permission of instructor required. Attend first class. Priority given to seniors majoring in Computer Science. Enroll in either CS 181, or CS 181W, not both.",Keith Winstein; K. Winstein; D. Bhargava; A. Berke,"Fall 2020, Spring 2020, Fall 2018, Spring 2018, Winter 2017",4,https://www.coursicle.com/stanford/courses/CS/181/
stanford,CS,181W,"CS 181W - Computers, Ethics, and Public Policy (WIM)","Writing-intensive version of CS181. Satisfies the WIM requirement for Computer Science, Engineering Physics, STS, and Math/Comp Sci undergraduates. To take this course, students need permission of instructor and may need to complete an assignment due at the first day of class. Class Notes: Enrollment limited to 40. Permission of instructor required. Attend first class. Priority given to seniors majoring in Computer Science, Engineering Physics, Math/Comp Sci, or STS. Satisfies WIM requirement for these majors. Enroll in either CS 181, or CS 181W, not both.",Keith Winstein; K. Winstein; D. Bhargava,"Fall 2020, Fall 2018, Spring 2018, Winter 2017",4,https://www.coursicle.com/stanford/courses/CS/181W/
stanford,CS,182,"CS 182 - Ethics, Public Policy, and Technological Change",,Mehran Sahami,Winter 2020,,https://www.coursicle.com/stanford/courses/CS/182/
stanford,CS,183E,CS 183E - Effective Leadership in High-Tech,"You will undoubtedly leave Stanford with the technical skills to excel in your first few jobs. But non-technical skills are just as critical to making a difference. This seminar is taught by two industry veterans in engineering leadership and product management. In a small group setting, we will explore how you can be a great individual contributor (communicating with clarity, getting traction for your ideas, resolving conflict, and delivering your best work) and how you can transition into leadership roles (finding leadership opportunities, creating a great team culture, hiring and onboarding new team members). We will end by turning back to your career (picking your first job and negotiating your offer, managing your career changes, building a great network, and succeeding with mentors). Prerequisites: Preference given to seniors and co-terms in Computer Science and related majors. Enrollment limited and application required for admittance. Class Notes: Enrollment limited to 18. Application, consent of instructors, and permission number required. Please complete the application at: https://www.surveymonkey.com/r/P98PRKY. Deadline for completed applications is September 19.",J. Goldfein,"Fall 2019, Fall 2018, Fall 2017",1,https://www.coursicle.com/stanford/courses/CS/183E/
stanford,CS,184,CS 184 - Bridging Policy and Tech Through Design,,Jeffrey Ullman,"Fall 2020, Spring 2020",,https://www.coursicle.com/stanford/courses/CS/184/
stanford,CS,190,CS 190 - Software Design Studio,,John Ousterhout; J. Ousterhout,"Winter 2020, Winter 2017",,https://www.coursicle.com/stanford/courses/CS/190/
stanford,CS,191,CS 191 - Senior Project,,James Zou; J. Zou; S. Ermon; R. Poldrack,"Fall 2020, Spring 2020, Fall 2019",,https://www.coursicle.com/stanford/courses/CS/191/
stanford,CS,191W,CS 191W - Writing Intensive Senior Project (WIM),Restricted to Computer Science and Computer Systems Engineering students. Writing-intensive version of CS191. Register using the section number of an Academic Council member. Prerequisite: Completion of at least 135 units.,James Zou; Jay Borenstein; Moses Charikar; Emma Brunskill; Gordon Wetzstein; Matei Zaharia; C. Wodtke; J. Zou; Z. Durumeric; K. Fatahalian; E. Brunskill; G. Wetzstein; M. Zaharia,"Winter 2020, Fall 2020, Spring 2020, Fall 2019, Spring 2019",,https://www.coursicle.com/stanford/courses/CS/191W/
stanford,CS,193P,CS 193P - iOS Application Development,"Tools and APIs required to build applications for the iPhone and iPad platforms using the iOS SDK. User interface design for mobile devices and unique user interactions using multi-touch technologies. Object-oriented design using model-view-controller paradigm, memory management, Swift programming language. Other topics include: object-oriented database API, animation, multi-threading, networking and performance considerations. Prerequisites: C language and object-oriented programming experience exceeding 106B or X level. Previous completion of any one of the following is required: CS 107, 108 (preferred) or 110. Recommended: UNIX, graphics, databases.",Paul Hegarty; P. Hegarty,"Fall 2020, Spring 2020, Spring 2019, Spring 2018, Fall 2017",3,https://www.coursicle.com/stanford/courses/CS/193P/
stanford,CS,193X,CS 193X - Web Programming Fundamentals,,Michael Chang,"Fall 2020, Spring 2020",,https://www.coursicle.com/stanford/courses/CS/193X/
stanford,CS,194,CS 194 - Software Project,"Design, specification, coding, and testing of a significant team programming project under faculty supervision. Documentation includes a detailed proposal. Public demonstration of the project at the end of the quarter. Preference given to seniors. May be repeat for credit. Prerequisites: CS 110 and CS 161.",Jay Borenstein; J. Borenstein,"Winter 2020, Fall 2020, Spring 2020, Spring 2019, Spring 2018",3,https://www.coursicle.com/stanford/courses/CS/194/
stanford,CS,194A,CS 194A - Android Programming Workshop,,Jay Borenstein,"Fall 2020, Spring 2020",,https://www.coursicle.com/stanford/courses/CS/194A/
stanford,CS,194H,CS 194H - User Interface Design Project,,James Landay; J. Landay,"Winter 2020, Winter 2017",,https://www.coursicle.com/stanford/courses/CS/194H/
stanford,CS,194W,CS 194W - Software Project (WIM),"Restricted to Computer Science and Electrical Engineering undergraduates. Writing-intensive version of CS194. Preference given to seniors. Class Notes: CS undergraduates only. Satisfies WIM requirement. Students enroll in either CS194, or CS194W, not both. See CS194 for classroom location.",Jay Borenstein; J. Borenstein,"Fall 2020, Spring 2019, Spring 2018, Winter 2017",3,https://www.coursicle.com/stanford/courses/CS/194W/
stanford,CS,195,CS 195 - Supervised Undergraduate Research,,Michael Bernstein; Christina Wodtke; Andrew Ng; C. Wodtke; A. Ng; M. Bernstein; G. Bejerano; M. Genesereth,"Winter 2020, Fall 2020, Spring 2020, Spring 2019, Fall 2018",,https://www.coursicle.com/stanford/courses/CS/195/
stanford,CS,196,CS 196 - Computer Consulting,"Focus is on Macintosh and Windows operating system maintenance and troubleshooting through hardware and software foundation and concepts. Topics include operating systems, networking, security, troubleshooting methodology with emphasis on Stanford's computing environment. Not a programming course. Prerequisite: 1C or equivalent.",S. Smith,"Spring 2019, Spring 2018, Winter 2017",2,https://www.coursicle.com/stanford/courses/CS/196/
stanford,CS,197,CS 197 - Computer Science Research,,M. Bernstein,Fall 2019,,https://www.coursicle.com/stanford/courses/CS/197/
stanford,CS,198,CS 198 - Teaching Computer Science,"Students lead a discussion section of 106A while learning how to teach a programming language at the introductory level. Focus is on teaching skills, techniques, and course specifics. Application and interview required; see http://cs198.stanford.edu.",Kathryn Rydberg; Mehran Sahami; K. Rydberg; C. Kincaid,"Winter 2020, Fall 2020, Spring 2020, Fall 2019, Spring 2019",,https://www.coursicle.com/stanford/courses/CS/198/
stanford,CS,198B,CS 198B - Additional Topics in Teaching Computer Science,Students build on the teaching skills developed in CS198. Focus is on techniques used to teach topics covered in CS106B. Prerequisite: successful completion of CS198.,K. Rydberg; M. Sahami; C. Kincaid,"Winter 2020, Fall 2019, Spring 2019, Spring 2018, Winter 2017",1,https://www.coursicle.com/stanford/courses/CS/198B/
stanford,CS,199,CS 199 - Independent Work,,Aviad Rubinstein; Zakir Durumeric; Ann Grimes; Christina Wodtke; Matei Zaharia; Gregory Valiant; Peter Bailis; Emma Brunskill; Moses Charikar; Mary Wootters; K. Fatahalian; D. Sadigh; C. Lee; Z. Durumeric; A. Grimes; M. Wootters,"Winter 2020, Fall 2020, Spring 2020, Fall 2019, Spring 2019",,https://www.coursicle.com/stanford/courses/CS/199/
stanford,CS,199P,CS 199P - Independent Work,,James Zou; Matei Zaharia; Richard Socher; C. Lee; Z. Durumeric; J. Borenstein; C. Barrett; R. Socher,"Winter 2020, Fall 2020, Spring 2020, Fall 2019, Spring 2019",,https://www.coursicle.com/stanford/courses/CS/199P/
stanford,CS,202,CS 202 - Law for Computer Science Professionals,,David Hansen; D. Hansen,"Fall 2020, Spring 2020, Fall 2018, Fall 2017",,https://www.coursicle.com/stanford/courses/CS/202/
stanford,CS,203,CS 203 - Cybersecurity: a Legal and Technical Perspective,"This class will use the case method to teach basic computer, network, and information security from technology, law, policy, and business perspectives. Using real world topics, we will study the technical, legal, policy, and business aspects of an incident or issue and its potential solutions. The case studies will be organized around the following topics: vulnerability disclosure, state sponsored sabotage, corporate and government espionage, credit card theft, theft of embarrassing personal data, phishing and social engineering attacks, denial of service attacks, attacks on weak session management and URLs, security risks and benefits of cloud data storage, wiretapping on the Internet, and digital forensics. Students taking the class will learn about the techniques attackers use, applicable legal prohibitions, rights, and remedies, the policy context, and strategies in law, policy and business for managing risk. Grades will be based on class participation, two reflection papers, and a final exam.Â Special Instructions: This class is limited to 65 students, with an effort made to have students from Stanford Law School (30 students will be selected by lottery) and students from Computer Science (30 students) and International Policy Studies (5 students). Elements used in grading: Class Participation (20%), Written Assignments (40%), Final Exam (40%). Cross-listed with the Law School (Law 4004) and International Policy Studies (IPS course number TBD). Class Notes: Enrollment limited to 30 CS students, 30 Law students, and 5 International Policy Studies students. Consent of instructors and permission number required. Course is cross-listed with the law school (LAW4004).",A. Grotto,Spring 2018,2,https://www.coursicle.com/stanford/courses/CS/203/
stanford,CS,204,CS 204 - Computational Law,"Legal informatics based on representation of regulations in computable form. Encoding regulations facilitate creation of legal information systems with significant practical value. Convergence of technological trends, growth of the Internet, advent of semantic web technology, and progress in computational logic make computational law prospects better. Topics: current state of computational law, prospects and problems, philosophical and legal implications. This course is *Cross* listed with LAW 4019. Prerequisite: basic concepts of programming. Class Notes: Course meeting time is 4:15pm - 6:15pm.",Roland Vogl; M. Genesereth,"Spring 2020, Spring 2019, Spring 2018",,https://www.coursicle.com/stanford/courses/CS/204/
stanford,CS,205A,"CS 205A - Mathematical Methods for Robotics, Vision, and Graphics",,D. James,Winter 2017,,https://www.coursicle.com/stanford/courses/CS/205A/
stanford,CS,205L,CS 205L - Continuous Mathematical Methods with an Emphasis on Machine Learning,,Ron Fedkiw,Winter 2020,,https://www.coursicle.com/stanford/courses/CS/205L/
stanford,CS,206,CS 206 - Exploring Computational Journalism,"This course will explore the evolving field of computational journalism. Students will research and discuss the state of the field, and do projects in areas such as understanding the media ecosystem, stimulating media creation, and assessing media impact. Admission by application; please email James Hamilton at jayth@stanford.edu to request application.",K. Bharat; D. Garcia,"Fall 2019, Fall 2018, Fall 2017",3,https://www.coursicle.com/stanford/courses/CS/206/
stanford,CS,208E,CS 208E - Great Ideas in Computer Science,Great Ideas in Computer Science Covers the intellectual tradition of computer science emphasizing ideas that reflect the most important milestones in the history of the discipline. Topics include programming and problem solving; implementing computation in hardware; algorithmic efficiency; the theoretical limits of computation; cryptography and security; computer networks; machine learning; and the philosophy behind artificial intelligence. Readings will include classic papers along with additional explanatory material. Enrollment limited to students in the Master's program in Computer Science Education. Class Notes: Enrollment limited to students in the MS program in CS Education.,C. Gregg,"Fall 2019, Fall 2018, Fall 2017",3,https://www.coursicle.com/stanford/courses/CS/208E/
stanford,CS,209,"CS 209 - Law, Bias, & Algorithms",,Sharad Goel,Spring 2020,,https://www.coursicle.com/stanford/courses/CS/209/
stanford,CS,210A,CS 210A - Software Project Experience with Corporate Partners,,Jay Borenstein; J. Borenstein,"Winter 2020, Winter 2017",,https://www.coursicle.com/stanford/courses/CS/210A/
stanford,CS,210B,CS 210B - Software Project Experience with Corporate Partners,"Continuation of CS210A. Focus is on real-world software development. Corporate partners seed projects with loosely defined challenges from their R&D labs; students innovate to build their own compelling software solutions. Student teams are treated as start-up companies with a budget and a technical advisory board comprised of the instructional staff and corporate liaisons. Teams will typically travel to the corporate headquarters of their collaborating partner, meaning some teams will travel internationally. Open loft classroom format such as found in Silicon Valley software companies. Exposure to: current practices in software engineering; techniques for stimulating innovation; significant development experience with creative freedoms; working in groups; real world software engineering challenges; public presentation of technical work; creating written descriptions of technical work. Prerequisites: CS 210A. Class Notes: Enrollment limited. Consent of instructor required. May be taken for 3 units by graduate students. Class meets in Gates 505.",Jay Borenstein; J. Borenstein,"Fall 2020, Spring 2020, Spring 2019, Spring 2018",,https://www.coursicle.com/stanford/courses/CS/210B/
stanford,CS,217,CS 217 - Hardware Accelerators for Machine Learning,,Oyekunle Olukotun; O. Olukotun,"Winter 2020, Fall 2018",,https://www.coursicle.com/stanford/courses/CS/217/
stanford,CS,221,CS 221 - Artificial Intelligence: Principles and Techniques,"Artificial intelligence (AI) has had a huge impact in many areas, including medical diagnosis, speech recognition, robotics, web search, advertising, and scheduling. This course focuses on the foundational concepts that drive these applications. In short, AI is the mathematics of making good decisions given incomplete information (hence the need for probability) and limited computation (hence the need for algorithms). Specific topics include search, constraint satisfaction, game playing, Markov decision processes, graphical models, machine learning, and logic. Prerequisites: CS 103 or CS 103B/X, CS 106B or CS 106X, CS 107, and CS 109 (algorithms, probability, and programming experience). Class Notes: Enrollment limited to 120 May be taken for 3 units by graduate students.",Chelsea Finn; D. Sadigh; P. Liang,"Fall 2020, Spring 2020, Fall 2019, Spring 2019, Fall 2018",,https://www.coursicle.com/stanford/courses/CS/221/
stanford,CS,223A,CS 223A - Introduction to Robotics,,Oussama Khatib; J. Bohg,"Winter 2020, Winter 2017",,https://www.coursicle.com/stanford/courses/CS/223A/
stanford,CS,224N,CS 224N - Natural Language Processing with Deep Learning,,Christopher Manning; R. Socher,"Winter 2020, Winter 2017",,https://www.coursicle.com/stanford/courses/CS/224N/
stanford,CS,224S,CS 224S - Spoken Language Processing,,Andrew Maas,Spring 2020,,https://www.coursicle.com/stanford/courses/CS/224S/
stanford,CS,224U,CS 224U - Natural Language Understanding,"Project-oriented class focused on developing systems and algorithms for robust machine understanding of human language. Draws on theoretical concepts from linguistics, natural language processing, and machine learning. Topics include lexical semantics, distributed representations of meaning, relation extraction, semantic parsing, sentiment analysis, and dialogue agents, with special lectures on developing projects, presenting research results, and making connections with industry. Prerequisites: one of LINGUIST 180, CS 124, CS 224N, CS224S, or CS221; and logical/semantics such as LINGUIST 130A or B, CS 157, or PHIL150.",Bill Maccartney; C. Potts,"Fall 2020, Spring 2020, Spring 2019, Spring 2018",,https://www.coursicle.com/stanford/courses/CS/224U/
stanford,CS,224W,CS 224W - Machine Learning with Graphs,"Networks are a fundamental tool for modeling complex social, technological, and biological systems. Coupled with emergence of online social networks and large-scale data availability in biological sciences, this course focuses on the analysis of massive networks which provide many computational, algorithmic, and modeling challenges. This course develops computational tools that reveal how the social, technological, and natural worlds are connected, and how the study of networks sheds light on these connections. Topics include: how information spreads through society; robustness and fragility of food webs and financial markets; algorithms for the World Wide Web; friend prediction in online social networks; identification of functional modules in biological networks; disease outbreak detection. Class Notes: May be taken for 3 units by graduate students.",J. Leskovec,"Fall 2019, Fall 2018, Fall 2017",,https://www.coursicle.com/stanford/courses/CS/224W/
stanford,CS,225A,CS 225A - Experimental Robotics,,Oussama Khatib; O. Khatib,"Fall 2020, Spring 2020, Spring 2019",,https://www.coursicle.com/stanford/courses/CS/225A/
stanford,CS,227B,CS 227B - General Game Playing,"A general game playing system accepts a formal description of a game to play it without human intervention or algorithms designed for specific games. Hands-on introduction to these systems and artificial intelligence techniques such as knowledge representation, reasoning, learning, and rational behavior. Students create GGP systems to compete with each other and in external competitions. Prerequisite: programming experience. Recommended: 103 or equivalent.",Michael Genesereth; M. Genesereth,"Spring 2020, Spring 2019, Spring 2018",3,https://www.coursicle.com/stanford/courses/CS/227B/
stanford,CS,228,CS 228 - Probabilistic Graphical Models: Principles and Techniques,,Stefano Ermon; S. Ermon,"Winter 2020, Winter 2017",,https://www.coursicle.com/stanford/courses/CS/228/
stanford,CS,229,CS 229 - Machine Learning,"Topics: statistical pattern recognition, linear and non-linear regression, non-parametric methods, exponential family, GLMs, support vector machines, kernel methods, model/feature selection, learning theory, VC dimension, clustering, density estimation, EM, dimensionality reduction, ICA, PCA, reinforcement learning and adaptive control, Markov decision processes, approximate dynamic programming, and policy search. Prerequisites: linear algebra, and basic probability and statistics. Class Notes: May be taken for 3 units by graduate students.",Tengyu Ma; A. Ng; C. Re; A. Avati,"Fall 2020, Spring 2020, Fall 2019, Spring 2019, Fall 2018",,https://www.coursicle.com/stanford/courses/CS/229/
stanford,CS,229A,CS 229A - Applied Machine Learning,,A. Ng,"Spring 2019, Fall 2018, Spring 2018",,https://www.coursicle.com/stanford/courses/CS/229A/
stanford,CS,229T,CS 229T - Statistical Learning Theory,,T. Ma,Fall 2018,,https://www.coursicle.com/stanford/courses/CS/229T/
stanford,CS,230,CS 230 - Deep Learning,"Deep Learning is one of the most highly sought after skills in AI. We will help you become good at Deep Learning. In this course, you will learn the foundations of Deep Learning, understand how to build neural networks, and learn how to lead successful machine learning projects. You will learn about Convolutional networks, RNNs, LSTM, Adam, Dropout, BatchNorm, Xavier/He initialization, and more. You will work on case studies from healthcare, autonomous driving, sign language reading, music generation, and natural language processing. You will master not only the theory, but also see how it is applied in industry. You will practice all these ideas in Python and in TensorFlow, which we will teach. AI is transforming multiple industries. After this course, you will likely find creative ways to apply it to your work. This class is taught in the flipped-classroom format. You will watch videos and complete in-depth programming assignments and online quizzes at home, then come in to class for advanced discussions and work on projects. This class will culminate in an open-ended final project, which the teaching team will help you on. Prerequisites: Familiarity with programming in Python and Linear Algebra (matrix / vector multiplications). CS 229 may be taken concurrently.",Andrew Ng; A. Ng,"Winter 2020, Fall 2020, Spring 2020, Fall 2019, Spring 2019",,https://www.coursicle.com/stanford/courses/CS/230/
stanford,CS,231A,CS 231A - Computer Vision: From 3D Reconstruction to Recognition,,S. Savarese,Winter 2017,,https://www.coursicle.com/stanford/courses/CS/231A/
stanford,CS,231C,CS 231C - Computer Vision and Image Analysis of Art,,David Stork,Spring 2020,,https://www.coursicle.com/stanford/courses/CS/231C/
stanford,CS,231N,CS 231N - Convolutional Neural Networks for Visual Recognition,"Computer Vision has become ubiquitous in our society, with applications insearch, image understanding, apps, mapping, medicine, drones, andself-driving cars. Core to many of these applications are the tasks of image classification, localization and detection. This course is a deep dive into details of neural network architectures with a focus on learning end-to-end models for these tasks, particularly image classification. During the 10-week course, students will learn to implement, train and debug their own neural networks and gain a detailed understanding of cutting-edge research in computer vision. The final assignment will involve training a multi-million parameter convolutional neural network and applying it on the largest image classification dataset (ImageNet). We will focus on teaching how to set up the problem of image recognition, the learning algorithms (e.g. backpropagation), practical engineering tricks for training and fine-tuning the networks and guide the students through hands-on assignments and a final course project. Much of the background and materials of this course will be drawn from the ImageNet Challenge: http://image-net.org/challenges/LSVRC/2014/index. Prerequisites: Proficiency in Python; familiarity with C/C++; CS 131 and CS 229 or equivalents; Math 21 or equivalent, linear algebra. Class Notes: May be taken for 3 units by graduate students.",Ranjay Krishna; F. Li,"Fall 2020, Spring 2020, Spring 2019, Spring 2018",,https://www.coursicle.com/stanford/courses/CS/231N/
stanford,CS,232,CS 232 - Digital Image Processing,,Jayant Thatte; B. Girod,"Winter 2020, Winter 2017",,https://www.coursicle.com/stanford/courses/CS/232/
stanford,CS,233,CS 233 - Geometric and Topological Data Analysis,"Mathematical computational tools for the analysis of data with geometric content, such images, videos, 3D scans, GPS traces -- as well as for other data embedded into geometric spaces. Global and local geometry descriptors allowing for various kinds of invariances. The rudiments of computational topology and persistent homology on sampled spaces. Clustering and other unsupervised techniques. Spectral methods for geometric data analysis. Non-linear dimensionality reduction. Alignment, matching, and map computation between geometric data sets. Function spaces and functional maps.Networks of data sets and joint analysis for segmentation and labeling. The emergence of abstractions or concepts from data. Prerequisites: discrete algorithms at the level of 161; linear algebra at the level of CME103.",Leonidas Guibas; L. Guibas,"Fall 2020, Spring 2020, Spring 2018",3,https://www.coursicle.com/stanford/courses/CS/233/
stanford,CS,234,CS 234 - Reinforcement Learning,,Emma Brunskill; E. Brunskill,"Winter 2020, Winter 2017",,https://www.coursicle.com/stanford/courses/CS/234/
stanford,CS,235,CS 235 - Computational Methods for Biomedical Image Analysis and Interpretation,,Daniel Rubin,"Fall 2020, Spring 2020",,https://www.coursicle.com/stanford/courses/CS/235/
stanford,CS,236,CS 236 - Deep Generative Models,,A. Grover,"Fall 2019, Fall 2018",,https://www.coursicle.com/stanford/courses/CS/236/
stanford,CS,237A,CS 237A - Principles of Robot Autonomy I,,M. Pavone,Fall 2019,,https://www.coursicle.com/stanford/courses/CS/237A/
stanford,CS,237B,CS 237B - Principles of Robot Autonomy II,,Jeannette Bohg,Winter 2020,,https://www.coursicle.com/stanford/courses/CS/237B/
stanford,CS,238,CS 238 - Decision Making under Uncertainty,"This course is designed to increase awareness and appreciation for why uncertainty matters, particularly for aerospace applications. Introduces decision making under uncertainty from a computational perspective and provides an overview of the necessary tools for building autonomous and decision-support systems. Following an introduction to probabilistic models and decision theory, the course will cover computational methods for solving decision problems with stochastic dynamics, model uncertainty, and imperfect state information. Topics include: Bayesian networks, influence diagrams, dynamic programming, reinforcement learning, and partially observable Markov decision processes. Applications cover: air traffic control, aviation surveillance systems, autonomous vehicles, and robotic planetary exploration. Prerequisites: basic probability and fluency in a high-level programming language.",M. Kochenderfer; A. Zanette,"Fall 2019, Fall 2018, Fall 2017",,https://www.coursicle.com/stanford/courses/CS/238/
stanford,CS,239,CS 239 - Advanced Topics in Sequential Decision Making,,Mykel Kochenderfer; M. Kochenderfer,"Winter 2020, Winter 2017",,https://www.coursicle.com/stanford/courses/CS/239/
stanford,CS,240,CS 240 - Advanced Topics in Operating Systems,"Recent research. Classic and new papers. Topics: virtual memory management, synchronization and communication, file systems, protection and security, operating system extension techniques, fault tolerance, and the history and experience of systems programming. Prerequisite: 140 or equivalent.",Dawson Engler; D. Engler,"Fall 2020, Spring 2020, Spring 2019, Spring 2018",3,https://www.coursicle.com/stanford/courses/CS/240/
stanford,CS,240LX,"CS 240LX - Advanced Systems Laboratory, Accelerated",,Dawson Engler,Fall 2020,,https://www.coursicle.com/stanford/courses/CS/240LX/
stanford,CS,241,CS 241 - Embedded Systems Workshop,"Project-centric building hardware and software for embedded computing systems. Students work on an existing project of their own or join one of these projects. Syllabus topics will be determined by the needs of the enrolled students and projects. Examples of topics include: interrupts and concurrent programming, deterministic timing and synchronization, state-based programming models, filters, frequency response, and high-frequency signals, low power operation, system and PCB design, security, and networked communication. Prerequisite: CS107 (or equivalent).",Philip Levis; M. Horowitz,"Winter 2020, Fall 2020, Spring 2020, Fall 2017",2,https://www.coursicle.com/stanford/courses/CS/241/
stanford,CS,242,CS 242 - Programming Languages,"Central concepts in modern programming languages, impact on software development, language design trade-offs, and implementation considerations. Functional, imperative, and object-oriented paradigms. Formal semantic methods and program analysis. Modern type systems, higher order functions and closures, exceptions and continuations. Modularity, object-oriented languages, and concurrency. Runtime support for language features, interoperability, and security issues. Prerequisite: 107, or experience with Lisp, C, and an object-oriented language.",W. Crichton,"Fall 2019, Fall 2018, Fall 2017",3,https://www.coursicle.com/stanford/courses/CS/242/
stanford,CS,243,CS 243 - Program Analysis and Optimizations,,Monica Lam; M. Lam,"Winter 2020, Winter 2017",,https://www.coursicle.com/stanford/courses/CS/243/
stanford,CS,244,CS 244 - Advanced Topics in Networking,"Classic papers, new ideas, and research papers in networking. Architectural principles: why the Internet was designed this way? Congestion control. Wireless and mobility; software-defined networks (SDN) and network virtualization; content distribution networks; packet switching; data-center networks. Prerequisite: 144 or equivalent. Class Notes: May be taken for 3 units by graduate students.",Nick Mckeown; K. Winstein,"Fall 2020, Spring 2020, Spring 2019, Spring 2018",,https://www.coursicle.com/stanford/courses/CS/244/
stanford,CS,244B,CS 244B - Distributed Systems,"Distributed operating systems and applications issues, emphasizing high-level protocols and distributed state sharing as the key technologies. Topics: distributed shared memory, object-oriented distributed system design, distributed directory services, atomic transactions and time synchronization, application-sufficient consistency, file access, process scheduling, process migration, and storage/communication abstractions on distribution, scale, robustness in the face of failure, and security. Prerequisites: CS 144.",David Mazieres; D. Mazieres,"Fall 2020, Spring 2020, Fall 2017",3,https://www.coursicle.com/stanford/courses/CS/244B/
stanford,CS,245,CS 245 - Principles of Data-Intensive Systems,,Matei Zaharia; M. Zaharia,"Winter 2020, Spring 2019",,https://www.coursicle.com/stanford/courses/CS/245/
stanford,CS,246,CS 246 - Mining Massive Data Sets,,Jure Leskovec; J. Leskovec,"Winter 2020, Winter 2017",,https://www.coursicle.com/stanford/courses/CS/246/
stanford,CS,246H,CS 246H - Mining Massive Data Sets Hadoop Lab,,D. Templeton,Winter 2017,,https://www.coursicle.com/stanford/courses/CS/246H/
stanford,CS,247,CS 247 - Human-Computer Interaction Design Studio,"Project-based focus on interaction design process, especially early-stage design and rapid prototyping. Methods used in interaction design including needs analysis, user observation, sketching, concept generation, scenario building, and evaluation. Prerequisites: 147 or equivalent background in design thinking; 106B or equivalent background in programming. Recommended: CS 142 or equivalent background in web programming. Class Notes: Attendance required.",J. Stanford; C. Wodtke; M. Agrawala; M. Bernstein,"Spring 2019, Spring 2018, Winter 2017",,https://www.coursicle.com/stanford/courses/CS/247/
stanford,CS,247A,CS 247A - Design for Artificial Intelligence,,Julie Stanford,Spring 2020,,https://www.coursicle.com/stanford/courses/CS/247A/
stanford,CS,247G,CS 247G - Introduction to Game Design,,Christina Wodtke,"Fall 2020, Spring 2020",,https://www.coursicle.com/stanford/courses/CS/247G/
stanford,CS,247I,CS 247I - Design for Understanding,,C. Wodtke,Fall 2019,,https://www.coursicle.com/stanford/courses/CS/247I/
stanford,CS,247S,CS 247S - Service Design,,Julie Stanford,Winter 2020,,https://www.coursicle.com/stanford/courses/CS/247S/
stanford,CS,248,CS 248 - Interactive Computer Graphics,"This is the second course in the computer graphics sequence, and as such it assumes a strong familiarity with rendering and image creation. The course has a strong focus on computational geometry, animation, and simulation. Topics include splines, implicit surfaces, geometric modeling, collision detection, animation curves, particle systems and crowds, character animation, articulation, skinning, motion capture and editing, rigid and deformable bodies, and fluid simulation. As a final project, students implement an interactive video game utilizing various concepts covered in the class. Games may be designed on mobile devices, in a client/server/browser environment, or on a standard personal computer. Prerequisite: CS148. Class Notes: Graduate students may take this course for 3 units.",Kayvon Fatahalian; K. Fatahalian; R. Fedkiw,"Winter 2020, Spring 2018, Winter 2017",,https://www.coursicle.com/stanford/courses/CS/248/
stanford,CS,250,CS 250 - Algebraic Error Correcting Codes,,M. Wootters,Winter 2017,,https://www.coursicle.com/stanford/courses/CS/250/
stanford,CS,251,CS 251 - Cryptocurrencies and blockchain technologies,,D. Boneh,"Fall 2019, Fall 2018",,https://www.coursicle.com/stanford/courses/CS/251/
stanford,CS,252,CS 252 - Analysis of Boolean Functions,,L. Tan,Fall 2018,,https://www.coursicle.com/stanford/courses/CS/252/
stanford,CS,253,CS 253 - Web Security,,F. Aboukhadijeh,Fall 2019,,https://www.coursicle.com/stanford/courses/CS/253/
stanford,CS,254,CS 254 - Computational Complexity,,Li-Yang Tan,Winter 2020,,https://www.coursicle.com/stanford/courses/CS/254/
stanford,CS,254B,CS 254B - Computational Complexity II,,Li-Yang Tan,"Fall 2020, Spring 2020",,https://www.coursicle.com/stanford/courses/CS/254B/
stanford,CS,255,CS 255 - Introduction to Cryptography,,Dan Boneh; D. Boneh,"Winter 2020, Winter 2017",,https://www.coursicle.com/stanford/courses/CS/255/
stanford,CS,257,CS 257 - Logic and Artificial Intelligence,,T. Icard,Winter 2017,,https://www.coursicle.com/stanford/courses/CS/257/
stanford,CS,259Q,CS 259Q - Quantum Computing,,Aviad Rubinstein,Winter 2020,,https://www.coursicle.com/stanford/courses/CS/259Q/
stanford,CS,260,CS 260 - Geometry of Polynomials in Algorithm Design,,Nima Ahmadipouranari,Winter 2020,,https://www.coursicle.com/stanford/courses/CS/260/
stanford,CS,265,CS 265 - Randomized Algorithms and Probabilistic Analysis,"Randomness pervades the natural processes around us, from the formation of networks, to genetic recombination, to quantum physics. Randomness is also a powerful tool that can be leveraged to create algorithms and data structures which, in many cases, are more efficient and simpler than their deterministic counterparts. This course covers the key tools of probabilistic analysis, and application of these tools to understand the behaviors of random processes and algorithms. Emphasis is on theoretical foundations, though we will apply this theory broadly, discussing applications in machine learning and data analysis, networking, and systems. Topics include tail bounds, the probabilistic method, Markov chains, and martingales, with applications to analyzing random graphs, metric embeddings, random walks, and a host of powerful and elegant randomized algorithms. Prerequisites: CS 161 and STAT 116, or equivalents and instructor consent.",G. Valiant,"Fall 2019, Fall 2018, Fall 2017",3,https://www.coursicle.com/stanford/courses/CS/265/
stanford,CS,43,CS 43 - Functional Programming in Clojure,,J. Cain,Winter 2017,,https://www.coursicle.com/stanford/courses/CS/43/
stanford,CS,261,CS 261 - Optimization and Algorithmic Paradigms,,Moses Charikar; M. Charikar,"Winter 2020, Winter 2017",,https://www.coursicle.com/stanford/courses/CS/261/
stanford,CS,269I,CS 269I - Incentives in Computer Science,,T. Roughgarden,Fall 2018,,https://www.coursicle.com/stanford/courses/CS/269I/
